# commands.py - VERSI√ìN COMPLETA Y CORREGIDA
import logging
from database import trading_db
from notifier import telegram_notifier

logger = logging.getLogger(__name__)

class CommandHandler:
    def __init__(self):
        self.commands = {
            '/start': self.handle_start,
            '/estado': self.handle_status,
            '/operaciones': self.handle_operations,
            '/estadisticas': self.handle_stats,
            '/help': self.handle_help,
            '/config': self.handle_config
        }
    
    async def handle_command(self, message):
        """Maneja todos los comandos entrantes"""
        try:
            if not message.text:
                return "‚ùå Comando no reconocido"
            
            command = message.text.split()[0].lower()
            
            if command in self.commands:
                return await self.commands[command](message)
            else:
                return await self.handle_help(message)
                
        except Exception as e:
            logger.error(f"Error procesando comando {message.text}: {e}")
            return "‚ùå Error procesando comando"
    
    async def handle_start(self, message):
        """Maneja el comando /start"""
        return """
ü§ñ **SISTEMA DE TRADING AUTOM√ÅTICO**

Bienvenido al sistema de trading automatizado.

üìã **Comandos disponibles:**
/estado - Estado del sistema
/operaciones - Operaciones activas
/estadisticas - Estad√≠sticas de trading
/config - Configuraci√≥n actual
/help - Ayuda

üîß Sistema operativo y monitorizando se√±ales.
"""
    
    async def handle_status(self, message):
        """Maneja el comando /estado"""
        try:
            status_lines = ["üìä **ESTADO DEL SISTEMA**\n"]
            
            # Estado Base de Datos
            try:
                db_status = "‚úÖ Operativa" if trading_db.is_connected() else "‚ùå Desconectada"
                cursor = trading_db.get_connection().cursor()
                cursor.execute("SELECT COUNT(*) FROM signals")
                signal_count = cursor.fetchone()[0]
                cursor.execute("SELECT COUNT(*) FROM signals WHERE status='ACTIVE'")
                active_count = cursor.fetchone()[0]
                status_lines.append(f"‚Ä¢ **Base de Datos**: {db_status}")
                status_lines.append(f"‚Ä¢ **Se√±ales Totales**: {signal_count}")
                status_lines.append(f"‚Ä¢ **Operaciones Activas**: {active_count}")
            except Exception as e:
                status_lines.append(f"‚Ä¢ **Base de Datos**: ‚ùå Error ({str(e)[:30]})")
            
            # Estado Telegram
            try:
                from telegram_client import telegram_user_client
                tg_status = "‚úÖ Conectado" if telegram_user_client.is_connected() else "‚ùå Desconectado"
                status_lines.append(f"‚Ä¢ **Telegram**: {tg_status}")
            except Exception as e:
                status_lines.append(f"‚Ä¢ **Telegram**: ‚ùå Error")
            
            # Estado Bybit
            try:
                from bybit_api import bybit_client
                bybit_status = "‚úÖ Conectado" if bybit_client.is_connected() else "‚ùå Desconectado"
                status_lines.append(f"‚Ä¢ **Bybit**: {bybit_status}")
            except Exception as e:
                status_lines.append(f"‚Ä¢ **Bybit**: ‚ùå Error")
            
            return "\n".join(status_lines)
            
        except Exception as e:
            logger.error(f"Error en comando /estado: {e}")
            return "‚ùå Error obteniendo estado del sistema"
    
    async def handle_operations(self, message):
        """Maneja el comando /operaciones"""
        try:
            cursor = trading_db.get_connection().cursor()
            cursor.execute("""
                SELECT pair, direction, entry_price, status, created_at 
                FROM signals 
                WHERE status='ACTIVE' 
                ORDER BY created_at DESC
            """)
            operations = cursor.fetchall()
            
            if not operations:
                return "üì≠ No hay operaciones activas actualmente"
            
            result = ["üìà **OPERACIONES ACTIVAS**\n"]
            for op in operations:
                pair, direction, entry_price, status, created_at = op
                result.append(f"‚Ä¢ {pair} {direction} @ {entry_price}")
                result.append(f"  üïí {created_at[:16]}\n")
            
            return "\n".join(result)
            
        except Exception as e:
            logger.error(f"Error en comando /operaciones: {e}")
            return "‚ùå Error obteniendo operaciones activas"
    
    async def handle_stats(self, message):
        """Maneja el comando /estadisticas"""
        try:
            cursor = trading_db.get_connection().cursor()
            
            # Estad√≠sticas b√°sicas
            cursor.execute("SELECT COUNT(*) FROM signals")
            total_signals = cursor.fetchone()[0]
            
            cursor.execute("SELECT COUNT(*) FROM signals WHERE status='COMPLETED'")
            completed_signals = cursor.fetchone()[0]
            
            cursor.execute("SELECT COUNT(*) FROM signals WHERE status='ACTIVE'")
            active_signals = cursor.fetchone()[0]
            
            stats = [
                "üìã **ESTAD√çSTICAS DE TRADING**\n",
                f"‚Ä¢ Se√±ales Totales: {total_signals}",
                f"‚Ä¢ Se√±ales Completadas: {completed_signals}",
                f"‚Ä¢ Se√±ales Activas: {active_signals}",
                f"‚Ä¢ Tasa de Finalizaci√≥n: {completed_signals/max(total_signals,1)*100:.1f}%"
            ]
            
            return "\n".join(stats)
            
        except Exception as e:
            logger.error(f"Error en comando /estadisticas: {e}")
            return "‚ùå Error obteniendo estad√≠sticas"
    
    async def handle_config(self, message):
        """Maneja el comando /config"""
        try:
            from config import (
                TELEGRAM_API_ID, TELEGRAM_API_HASH, TELEGRAM_PHONE,
                TELEGRAM_BOT_TOKEN, OUTPUT_CHANNEL_ID, SIGNALS_CHANNEL_ID,
                BYBIT_API_KEY, BYBIT_TESTNET, RISK_PERCENTAGE
            )
            
            config_info = [
                "‚öôÔ∏è **CONFIGURACI√ìN ACTUAL**\n",
                f"‚Ä¢ Canal Se√±ales: {SIGNALS_CHANNEL_ID}",
                f"‚Ä¢ Canal Output: {OUTPUT_CHANNEL_ID}",
                f"‚Ä¢ Bybit Testnet: {BYBIT_TESTNET}",
                f"‚Ä¢ Riesgo por Operaci√≥n: {RISK_PERCENTAGE}%"
            ]
            
            return "\n".join(config_info)
            
        except Exception as e:
            logger.error(f"Error en comando /config: {e}")
            return "‚ùå Error obteniendo configuraci√≥n"
    
    async def handle_help(self, message):
        """Maneja el comando /help"""
        help_text = """
ü§ñ **COMANDOS DISPONIBLES**

/start - Iniciar el bot
/estado - Estado general del sistema
/operaciones - Operaciones activas actuales  
/estadisticas - Estad√≠sticas de trading
/config - Configuraci√≥n actual
/help - Muestra esta ayuda

üìä **Sistema de Trading Autom√°tico**
- Monitoreo de se√±ales en tiempo real
- Ejecuci√≥n autom√°tica en Bybit
- Gesti√≥n de riesgo integrada
"""
        return help_text

# Instancia global del manejador de comandos
command_handler = CommandHandler()

# === FUNCIONES DE COMPATIBILIDAD PARA notifier.py ===

async def start_command(update, context):
    """Wrapper para compatibilidad con telegram.ext"""
    try:
        response = await command_handler.handle_start(update.message)
        await update.message.reply_text(response, parse_mode='Markdown')
    except Exception as e:
        logger.error(f"Error en start_command: {e}")
        await update.message.reply_text("‚ùå Error procesando comando")

async def status_command(update, context):
    """Wrapper para compatibilidad con telegram.ext"""
    try:
        response = await command_handler.handle_status(update.message)
        await update.message.reply_text(response, parse_mode='Markdown')
    except Exception as e:
        logger.error(f"Error en status_command: {e}")
        await update.message.reply_text("‚ùå Error procesando comando")

async def operations_command(update, context):
    """Wrapper para compatibilidad con telegram.ext"""
    try:
        response = await command_handler.handle_operations(update.message)
        await update.message.reply_text(response, parse_mode='Markdown')
    except Exception as e:
        logger.error(f"Error en operations_command: {e}")
        await update.message.reply_text("‚ùå Error procesando comando")

async def help_command(update, context):
    """Wrapper para compatibilidad con telegram.ext"""
    try:
        response = await command_handler.handle_help(update.message)
        await update.message.reply_text(response, parse_mode='Markdown')
    except Exception as e:
        logger.error(f"Error en help_command: {e}")
        await update.message.reply_text("‚ùå Error procesando comando")

async def review_command(update, context):
    """Maneja el comando /revisar"""
    try:
        response = """
üîç **REVISI√ìN DE OPERACIONES**

üìä **Funcionalidades disponibles:**
‚Ä¢ Detecci√≥n autom√°tica de operaciones en Bybit
‚Ä¢ Monitoreo de ROI en tiempo real
‚Ä¢ Alertas de take-profit y stop-loss
‚Ä¢ Recomendaciones de gesti√≥n de riesgo

üöÄ **Para usar:**
1. El sistema detecta autom√°ticamente operaciones abiertas
2. Usa /seguimiento para ver el estado actual
3. Recibir√°s alertas autom√°ticas de cambios

üìù *Esta funci√≥n se integra con operation_tracker.py*
"""
        await update.message.reply_text(response, parse_mode='Markdown')
    except Exception as e:
        logger.error(f"Error en review_command: {e}")
        await update.message.reply_text("‚ùå Error en comando de revisi√≥n")

async def follow_command(update, context):
    """Maneja el comando /seguimiento"""
    try:
        response = """
üìä **SEGUIMIENTO DE OPERACIONES**

üìà **Estad√≠sticas en tiempo real:**
‚Ä¢ ROI actual por operaci√≥n
‚Ä¢ Precio actual vs entrada
‚Ä¢ Recomendaciones de gesti√≥n
‚Ä¢ Historial de cambios

üîî **Alertas autom√°ticas:**
‚úÖ Take-profit alcanzado
‚ö†Ô∏è  ROI cr√≠tico (-30%)
üîÑ Recomendaci√≥n de reversi√≥n
üìâ Cambios de tendencia

üìã *Usa /operaciones para ver se√±ales recientes*
"""
        await update.message.reply_text(response, parse_mode='Markdown')
    except Exception as e:
        logger.error(f"Error en follow_command: {e}")
        await update.message.reply_text("‚ùå Error en comando de seguimiento")