# test_complete_system.py - VERSI√ìN CORREGIDA
import asyncio
import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

def test_complete_system():
    print("üß™ PRUEBA COMPLETA DEL SISTEMA")
    print("=" * 50)
    
    # 1. Test de imports b√°sicos
    print("1. Cargando m√≥dulos principales...")
    try:
        from helpers import parse_signal_message, validate_signal_data
        from database import trading_db
        print("   ‚úÖ M√≥dulos cargan correctamente")
    except Exception as e:
        print(f"   ‚ùå Error cargando m√≥dulos: {e}")
        return False
    
    # 2. Test de parser
    print("2. Probando parser de se√±ales...")
    test_signal = """üî• ENSOUSDT (Shortüìâ, x20) üî•
Entry - 1.538
Take-Profit:
ü•â 1.5072 (40% of profit)
ü•à 1.4919 (60% of profit)"""
    
    parsed = parse_signal_message(test_signal)
    if parsed:
        print("   ‚úÖ Parser OK")
        print(f"      {parsed['pair']} {parsed['direction']} @ {parsed['entry_price']} (x{parsed.get('leverage', 'N/A')})")
    else:
        print("   ‚ùå Parser fall√≥")
        return False
    
    # 3. Test de validaci√≥n
    print("3. Probando validaci√≥n de se√±ales...")
    if parsed:
        is_valid, message = validate_signal_data(parsed)
        if is_valid:
            print(f"   ‚úÖ Se√±al v√°lida: {message}")
        else:
            print(f"   ‚ùå Se√±al inv√°lida: {message}")
            return False
    
    # 4. Test de base de datos - CORREGIDO
    print("4. Probando base de datos...")
    try:
        # Verificar si la base de datos tiene el m√©todo correcto
        if hasattr(trading_db, 'get_connection'):
            conn = trading_db.get_connection()
            cursor = conn.cursor()
            cursor.execute("SELECT name FROM sqlite_master WHERE type='table'")
            tables = cursor.fetchall()
            cursor.close()
            
            if tables:
                print(f"   ‚úÖ Base de datos operativa ({len(tables)} tablas encontradas)")
                table_names = [table[0] for table in tables]
                print(f"      Tablas: {', '.join(table_names)}")
            else:
                print("   ‚ö†Ô∏è  Base de datos conectada pero sin tablas")
        else:
            print("   ‚ö†Ô∏è  M√©todo de conexi√≥n no disponible en database.py")
            
    except Exception as e:
        print(f"   ‚ùå Error en base de datos: {e}")
    
    # 5. Test de configuraci√≥n
    print("5. Verificando configuraci√≥n...")
    try:
        from config import (
            TELEGRAM_API_ID, TELEGRAM_API_HASH, TELEGRAM_PHONE,
            TELEGRAM_BOT_TOKEN, OUTPUT_CHANNEL_ID, SIGNALS_CHANNEL_ID,
            BYBIT_API_KEY, BYBIT_API_SECRET
        )
        
        config_checks = [
            ("TELEGRAM_API_ID", TELEGRAM_API_ID),
            ("TELEGRAM_API_HASH", TELEGRAM_API_HASH),
            ("TELEGRAM_PHONE", TELEGRAM_PHONE),
            ("TELEGRAM_BOT_TOKEN", TELEGRAM_BOT_TOKEN),
            ("OUTPUT_CHANNEL_ID", OUTPUT_CHANNEL_ID),
            ("SIGNALS_CHANNEL_ID", SIGNALS_CHANNEL_ID),
            ("BYBIT_API_KEY", BYBIT_API_KEY),
            ("BYBIT_API_SECRET", BYBIT_API_SECRET),
        ]
        
        all_config_ok = True
        for name, value in config_checks:
            if value:
                print(f"   ‚úÖ {name}: Configurado")
            else:
                print(f"   ‚ùå {name}: No configurado")
                all_config_ok = False
        
        if not all_config_ok:
            print("   ‚ö†Ô∏è  Algunas configuraciones faltan")
        
    except ImportError as e:
        print(f"   ‚ùå Error importando configuraci√≥n: {e}")
        return False
    
    # 6. Test de m√≥dulos avanzados (si existen)
    print("6. Probando m√≥dulos avanzados...")
    advanced_modules = []
    
    try:
        from connection_monitor import connection_monitor
        print("   ‚úÖ Connection Monitor cargado")
        advanced_modules.append("Connection Monitor")
    except ImportError as e:
        print(f"   ‚ö†Ô∏è  Connection Monitor no disponible: {e}")
    
    try:
        from signal_manager import signal_manager
        print("   ‚úÖ Signal Manager cargado")
        advanced_modules.append("Signal Manager")
    except ImportError as e:
        print(f"   ‚ö†Ô∏è  Signal Manager no disponible: {e}")
    
    try:
        from divergence_detector import divergence_detector
        print("   ‚úÖ Divergence Detector cargado")
        advanced_modules.append("Divergence Detector")
    except ImportError as e:
        print(f"   ‚ö†Ô∏è  Divergence Detector no disponible: {e}")
    
    print("\n" + "=" * 50)
    print("üéØ RESUMEN DEL SISTEMA")
    print("   ‚úÖ Parser de se√±ales - OPERATIVO")
    print("   ‚úÖ Validaci√≥n de datos - OPERATIVO")
    print("   ‚úÖ Configuraci√≥n base - OPERATIVO")
    print(f"   üìä M√≥dulos avanzados: {len(advanced_modules)} cargados")
    
    if advanced_modules:
        print(f"      ‚Ä¢ {', '.join(advanced_modules)}")
    
    print("\nüí° Sistema base listo para operar")
    
    return True

async def test_telegram_integration():
    """Test opcional de integraci√≥n con Telegram"""
    print("\nüîó TEST OPCIONAL: Integraci√≥n Telegram")
    print("=" * 50)
    
    try:
        from telegram_client import telegram_user_client
        from notifier import telegram_notifier
        
        # Test cliente usuario - CORREGIDO
        print("1. Probando cliente de usuario...")
        user_ok = await telegram_user_client.connect()
        if user_ok:
            print("   ‚úÖ Cliente de usuario conectado")
            
            # Probar m√©todos disponibles
            try:
                # Verificar m√©todos reales del cliente
                if hasattr(telegram_user_client, 'get_messages'):
                    messages = await telegram_user_client.get_messages(SIGNALS_CHANNEL_ID, limit=3)
                    if messages:
                        print(f"   ‚úÖ Puede leer canal de se√±ales ({len(messages)} mensajes)")
                    else:
                        print("   ‚ö†Ô∏è  Conectado pero no hay mensajes")
                else:
                    print("   ‚ö†Ô∏è  M√©todo get_messages no disponible")
            except Exception as e:
                print(f"   ‚ö†Ô∏è  Error leyendo canal: {e}")
            
            await telegram_user_client.disconnect()
        else:
            print("   ‚ùå Cliente de usuario fall√≥")
        
        # Test bot
        print("2. Probando bot de notificaciones...")
        bot_ok = await telegram_notifier.test_connection()
        if bot_ok:
            print("   ‚úÖ Bot conectado")
            
            # Probar env√≠o de mensaje
            try:
                await telegram_notifier.send_alert(
                    "Test del Sistema",
                    "‚úÖ Sistema de trading verificado y operativo",
                    "success"
                )
                print("   ‚úÖ Bot puede enviar mensajes")
            except Exception as e:
                print(f"   ‚ö†Ô∏è  Bot conectado pero error enviando: {e}")
        else:
            print("   ‚ùå Bot fall√≥")
        
        return user_ok and bot_ok
        
    except Exception as e:
        print(f"   ‚ùå Error en integraci√≥n Telegram: {e}")
        return False

async def test_commands():
    """Test espec√≠fico de comandos"""
    print("\n‚å®Ô∏è  TEST DE COMANDOS")
    print("=" * 50)
    
    try:
        from commands import command_handler
        from notifier import telegram_notifier
        
        print("1. Probando comando /estado...")
        
        # Simular mensaje de comando
        class MockMessage:
            def __init__(self, text):
                self.text = text
                self.chat_id = "test_chat"
        
        mock_msg = MockMessage("/estado")
        
        # Procesar comando
        result = await command_handler.handle_command(mock_msg)
        
        if result:
            print("   ‚úÖ Comando /estado procesado correctamente")
            print(f"      Respuesta: {result}")
        else:
            print("   ‚ùå Comando /estado no devolvi√≥ respuesta")
            
        return result is not None
        
    except Exception as e:
        print(f"   ‚ùå Error en comandos: {e}")
        return False

if __name__ == "__main__":
    # Test principal s√≠ncrono
    success = test_complete_system()
    
    # Test Telegram y comandos (as√≠ncrono)
    if success:
        try:
            # Test integraci√≥n Telegram
            telegram_ok = asyncio.run(test_telegram_integration())
            
            # Test espec√≠fico de comandos
            commands_ok = asyncio.run(test_commands())
            
            if telegram_ok and commands_ok:
                print("\nüéâ ¬°SISTEMA COMPLETAMENTE OPERATIVO! üéâ")
            else:
                print("\n‚ö†Ô∏è  Sistema operativo pero con algunos issues:")
                if not commands_ok:
                    print("   ‚Ä¢ Comandos requieren ajustes")
                if not telegram_ok:
                    print("   ‚Ä¢ Telegram requiere ajustes")
        except Exception as e:
            print(f"\n‚ö†Ô∏è  Error en tests as√≠ncronos: {e}")
    else:
        print("\n‚ùå Sistema base requiere ajustes")