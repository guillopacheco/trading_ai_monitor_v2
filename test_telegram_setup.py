# test_telegram_setup.py - VERSI√ìN MEJORADA CON ACCESO DIRECTO
import asyncio
import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from telegram_client import telegram_user_client
from notifier import telegram_notifier
from config import SIGNALS_CHANNEL_ID

async def test_telegram_setup():
    print("üß™ Probando configuraci√≥n completa de Telegram...")
    
    # Probar cliente de usuario (LECTURA)
    print("1. Probando cliente de USUARIO (para leer se√±ales)...")
    user_ok = await telegram_user_client.connect()
    if user_ok:
        print("   ‚úÖ Cliente de usuario: CONECTADO")
        print(f"   üîç Intentando acceder al canal: {SIGNALS_CHANNEL_ID}")
        
        try:
            # Listar di√°logos para encontrar el canal
            dialogs = await telegram_user_client.client.get_dialogs()
            target_channel = None
            
            for dialog in dialogs:
                if (hasattr(dialog, 'id') and 
                    (str(dialog.id) == SIGNALS_CHANNEL_ID or 
                     (hasattr(dialog, 'name') and "Andy Insider" in dialog.name))):
                    target_channel = dialog
                    print(f"   üéØ Canal objetivo encontrado: {dialog.name} (ID: {dialog.id})")
                    break
            
            if target_channel:
                # Intentar acceder usando la entidad del di√°logo
                print("   üîÑ Intentando acceso usando entidad del di√°logo...")
                try:
                    messages = await telegram_user_client.client.get_messages(
                        target_channel.entity,
                        limit=5
                    )
                    if messages:
                        print(f"   ‚úÖ ‚úÖ ACCESO EXITOSO - {len(messages)} mensajes obtenidos!")
                        for msg in messages[:3]:  # Mostrar primeros 3 mensajes
                            print(f"      üì® {msg.date}: {msg.text[:100]}...")
                    else:
                        print("   ‚ö†Ô∏è  Canal accesible pero sin mensajes recientes")
                        
                except Exception as e:
                    print(f"   ‚ùå Error accediendo via entidad: {e}")
                    
                    # Intentar m√©todo alternativo - usar input peer directamente
                    print("   üîÑ Intentando m√©todo alternativo...")
                    try:
                        entity = await telegram_user_client.client.get_input_entity(target_channel.id)
                        messages = await telegram_user_client.client.get_messages(entity, limit=3)
                        if messages:
                            print(f"   ‚úÖ ‚úÖ ACCESO EXITOSO (m√©todo alternativo) - {len(messages)} mensajes!")
                        else:
                            print("   ‚ö†Ô∏è  M√©todo alternativo funciona pero sin mensajes")
                    except Exception as e2:
                        print(f"   ‚ùå M√©todo alternativo tambi√©n fall√≥: {e2}")
            else:
                print("   ‚ùå Canal no encontrado en di√°logos")
                
        except Exception as e:
            print(f"   ‚ùå Error general: {e}")
        finally:
            await telegram_user_client.disconnect()
    else:
        print("   ‚ùå Cliente de usuario: FALL√ì")
    
    # Probar bot (ESCRITURA) - Mantenemos igual
    print("2. Probando BOT (para enviar resultados)...")
    bot_ok = await telegram_notifier.test_connection()
    if bot_ok:
        print("   ‚úÖ Bot: CONECTADO")
        try:
            await telegram_notifier.send_alert(
                "Test de Sistema - Acceso a Canal",
                f"‚úÖ User conectado\n‚ùå Acceso a canal: En progreso\nüìä Canales disponibles: 6",
                "info"
            )
            print("   ‚úÖ Bot puede enviar mensajes")
        except Exception as e:
            print(f"   ‚ùå Bot no puede enviar mensajes: {e}")
    else:
        print("   ‚ùå Bot: FALL√ì")
    
    print("üéØ RESUMEN: Sistema base operativo, acceso a canal en verificaci√≥n")

if __name__ == "__main__":
    asyncio.run(test_telegram_setup())